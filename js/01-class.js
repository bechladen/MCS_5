/*
 * Класи
 *  - Оголошення класу
 *  - Конструктор класу
 *  - Методи класу
 *  - Прототип екземпляру
 *  - Приватні властивості
 *  - Геттери і сеттери
 *  - Статичні властивості
 */

//* клас - це такий собі завод який описує поля та методи для одного обʼєкту і використовується для створення нових обʼєктів. Шаблон на основі якого створюються нові обʼєкти. Якщо заглянути під капот, то клас - це звичайний синтаксичний цукор старої фукнції конструктора якою раніше користувались в джс.

class Car {
  // статичні властивості та методи. Це властивості які доступні тільки ЧЕРЕЗ сам клас. оскільки клас це фукнція, а фукнція це обʼєкт, то ми можемо записувати в цей обʼєкт власні методи і власні властивості і звертатись до них ВИКЛЮЧНО через клас.
  static description = 'Клас для створення автомобілів!';
  static amount = 0;

  static addCar() {
    this.amount += 1;
    console.log(`Додано новий автомобіль! Поточна кількість: ${this.amount}`);
  }

  // приватне поле. завжди оголошується за межами конструктору і перед назвою ставиться знак #
  #owner;

  // конструктор - це метод, який викликається під час створення екземпляру класу для того, щоб ініціалізувати новий обʼєкт
  constructor(brand, model, price, owner) {
    Car.addCar();
    // публічні властивості - властивості класу, які доступні повсюди (всередині класу, в екземплярі, в класі який наслідується)
    this.brand = brand;
    this.model = model;
    this.price = price;

    // приватна властивість - вона доступна тільки всередині класу і все. До неї не можна звернутись з екземпляру чи з іншого класу
    this.#owner = owner;
  }

  // публічний метод - метод, який доступний повсюди (всередині класу, в екземплярі (через ланцюг прототипів), в класі який наслідується)
  displayInfo() {
    console.log(
      `Марка: ${this.brand}\nМодель: ${this.model}\nЦіна: ${this.price}$`
    );
  }

  // приватний метод - те саме що і приватна властивість, доступний тільки в самому класі

  #checkOwner() {
    const pass = Number(prompt('Введіть пароль адміна'));

    return pass === 1111;
  }

  // методи аксесори - це методи які надають нам можливіть читати (get) та перезаписувати (set) приватні поля. Фактично ці методи створюють публічне одноіменне поле, яке просто посилається на ваше приватне

  // нічого не приймає в параметрах та обовʼязково повинен повернути значення приватного поля
  get owner() {
    if (this.#checkOwner()) {
      return this.#owner;
    }
    console.log('Немає доступу до читання!');
  }

  // обовʼязково повинен приймати нове значення вашого поля в якості параметру
  set owner(newOwner) {
    if (this.#checkOwner()) {
      this.#owner = newOwner;
      return;
    }
    console.log('Немає доступу до редагування!');
  }
}

const bmw = new Car('BMW', 'M3', 30000, 'ryan@gmail.com'); // екземпляр класу
/*
оператор new робить декілька важливих речей:
1. він створює пустий обʼєкт - const bmw = {}
2. викликає публічний метод класу constructor і вказує що його контекстом (this) буде наш пустий обʼєкт який було створено в попередньому кроці
*/

console.log(bmw);

const infinity = new Car('Infinity', 'Q60s', 35000, 'milana@gmail.com'); // екземпляр класу

console.log(infinity);

bmw.displayInfo();
infinity.displayInfo();

// bmw.owner = 'aaa@gmail.com';
// console.log(bmw.owner);


const audi = new Car('Audi', 'A5', 28000, 'rick@gmail.com'); 


console.dir(Car);